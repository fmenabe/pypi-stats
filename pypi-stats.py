#!/usr/bin/env python
# coding: utf-8

import yaml
import yamlordereddictloader
import clg
import clg.conf as conf
import clg.spinner as spinner
from clg.table import init as init_table, Row, Cell
import sys
import json
import bigquery
from datetime import date, datetime, timedelta

CMD_CONFIG = """
help: Simple tool for printing PyPI packages downloads.
description: Simple tool for printing PyPI packages downloads.
add_help: false
print_help: true

groups:
  - title: Common option
    options:
      help:
        short: h
        action: help
        default: __SUPPRESS__
        help: Show this help message and exit.

  - title: BigQuery authentication option
    description: >
      For requesting BigQuery, you need a JSON token of a service account.

    options:
      token:
        short: t
        default: ~/.config/pypi_stats/bigquery_token.json
        help: "Path to your Bigquery JSON token (default: __DEFAULT__)."

  - title: Retrieving options
    description: >
      The default is to retrieve in BigQuery downloads of the current month and from
      'pip' and 'setuptools' installers only.

    options:
      installers:
        short: i
        nargs: '*'
        default: [pip, setuptools]
        help: "Filter on theses installers (default: __DEFAULT__)."

    exclusive_groups:
      - options:
          year:
            short: y
            action: store_true
            help: Retrieve downloads of the current year.
          all:
            short: a
            action: store_true
            help: Retrieve all downloads.
          file:
            help: >
              Use a file generated by the 'json' format instead of requesting BigQuery.

  - title: Formatting options
    description: >
      The default is to print an ACSII table with the downloads by packages and versions.

    options:
      format:
        short: f
        choices: [text, json, raw]
        default: 'text'
        help: |
            Output format (default: __DEFAULT__). 'json' format return statistics in
            JSON and 'raw' format return raw data from BigQuery in JSON.

    exclusive_groups:
      - options:
          page:
            short: p
            action: store_true
            help: Page result.
          output_file:
            short: o
            metavar: PATH
            help: Save output in a file.

  - title: Arguments
    args:
      packages:
        nargs: '*'
        metavar: package
        help: Packages to print downloads.
"""

DAY = date.today()
WEEK = DAY - timedelta(days=DAY.weekday())
MONTH = date(DAY.year, DAY.month, 1)
YEAR = date(DAY.year, 1, 1)
ALL = date(1970, 1, 1)

REQUEST = """
SELECT
    DATE(timestamp) as day,
    file.project,
    file.version,
    COUNT(*) as downloads
FROM
    TABLE_DATE_RANGE(
        [the-psf:pypi.downloads],
        TIMESTAMP("{date}"),
        CURRENT_TIMESTAMP()
    )
WHERE
    file.project IN ({projects:s})
    AND details.installer.name IN ({installers:s})
GROUP BY day, file.project, file.version
ORDER BY file.project, file.version, day
"""

COLUMNS = (
    Cell('Name'),
    Cell('Version'),
    Cell('Day'),
    Cell('Week'),
    Cell('Month'),
    Cell('Year'),
    Cell('All')
)

def main():
    cmd_conf = yaml.load(CMD_CONFIG, Loader=yamlordereddictloader.Loader)
    globals()['args'] = clg.init(format='raw', data=cmd_conf)

    if args.file:
        stats = json.load(open(args.file))
    else:
        if not args.packages:
            clg.cmd.parser.error('the following arguments are required: package')
        with spinner.start():
            data = retrieve_data()
            stats = parse_data(data)

    if args.format == 'text':
        print_table(stats)
        sys.exit(0)

    if args.format == 'json':
        output = json.dumps(stats, indent=2)
    elif args.format == 'raw':
        output = json.dumps(data, indent=2)
    if args.output_file:
        with open(args.output_file, 'w') as fhandler:
            fhandler.write(output)
    else:
        print(output)

def retrieve_data():
    spinner.info('authenticating')
    bigquery_client = bigquery.get_client(json_key_file=args.token, readonly=True)

    spinner.info('submitting query')
    bigquery_request = REQUEST.format(
        date=ALL if args.all else YEAR if args.year else MONTH,
        projects=', '.join("'{:s}'".format(project) for project in args.packages),
        installers=', '.join("'{:s}'".format(client) for client in args.installers))
    job_id, _results = bigquery_client.query(bigquery_request)

    start = datetime.now()
    while True:
        duration = datetime.now() - start
        spinner.info('retrieving data ({:.2f}s)'.format(duration.total_seconds()))
        complete, row_count = bigquery_client.check_job(job_id)
        if complete:
            return bigquery_client.get_query_rows(job_id)

def parse_data(data):
    stats_fields = ['day', 'week', 'month']
    if args.all:
        stats_fields.extend(('year', 'all'))
    elif args.year:
        stats_fields.append('year')

    stats = {}
    for row in data:
        cur_date = date(*map(int, row['day'].split('-')))
        project = row['file_project']
        version = row['file_version']
        downloads = row['downloads']

        stats.setdefault(project, {}).setdefault(version, {})
        for stat in stats_fields:
            base_date = getattr(sys.modules[__name__], stat.upper())
            if cur_date >= base_date:
                stats[project][version].setdefault(stat, 0)
                stats[project][version][stat] += downloads

    return stats

def print_table(stats):
    # Ugly way to have the number of stats columns from data by randomly picking
    # stats of a project and a version.
    random_stat = (stats[ next(iter(stats.keys())) ]
                        [ next(iter(stats[ next(iter(stats.keys())) ].keys())) ])
    nb_columns = 2 + len(random_stat)

    output = init_table(args)
    output.append(Row(*COLUMNS[:nb_columns]))

    for project, versions in sorted(stats.items()):
        project_stats = {}
        row = [[] for i in range(0, nb_columns)]
        for version, stats in reversed(sorted(versions.items())):
            row[0].append(project)
            row[1].append(version)

            for idx, stat in enumerate(('day', 'week', 'month', 'year', 'all')):
                if stat not in stats:
                    continue
                row[2+idx].append(stats[stat] or '-')
                project_stats.setdefault(stat, 0)
                project_stats[stat] += stats[stat]

        row[0].append(project)
        row[1].append('*')
        for idx, stat in enumerate(('day', 'week', 'month', 'year', 'all')):
            if stat in project_stats:
                row[2+idx].append(project_stats[stat] or '-')
        output.append(Row(*[Cell(value) for value in row]))
    output.flush()

if __name__ == '__main__':
    main()
